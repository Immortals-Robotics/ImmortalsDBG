// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot-feedback.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robot-feedback.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PID_reflection_ = NULL;
const ::google::protobuf::Descriptor* Constans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Constans_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotFeedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotFeedback_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_robot_2dfeedback_2eproto() {
  protobuf_AddDesc_robot_2dfeedback_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "robot-feedback.proto");
  GOOGLE_CHECK(file != NULL);
  PID_descriptor_ = file->message_type(0);
  static const int PID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, d_),
  };
  PID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PID_descriptor_,
      PID::default_instance_,
      PID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PID));
  Constans_descriptor_ = file->message_type(1);
  static const int Constans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constans, gyro_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constans, button_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constans, pid_),
  };
  Constans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Constans_descriptor_,
      Constans::default_instance_,
      Constans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Constans));
  RobotFeedback_descriptor_ = file->message_type(2);
  static const int RobotFeedback_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, battery_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, cap_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, dribbe_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, ball_detected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, motor_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, encoder_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, gyro_yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, motor_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, motor_set_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, pid_),
  };
  RobotFeedback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotFeedback_descriptor_,
      RobotFeedback::default_instance_,
      RobotFeedback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFeedback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotFeedback));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_robot_2dfeedback_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PID_descriptor_, &PID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Constans_descriptor_, &Constans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotFeedback_descriptor_, &RobotFeedback::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_robot_2dfeedback_2eproto() {
  delete PID::default_instance_;
  delete PID_reflection_;
  delete Constans::default_instance_;
  delete Constans_reflection_;
  delete RobotFeedback::default_instance_;
  delete RobotFeedback_reflection_;
}

void protobuf_AddDesc_robot_2dfeedback_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024robot-feedback.proto\"&\n\003PID\022\t\n\001P\030\001 \002(\002"
    "\022\t\n\001I\030\002 \002(\002\022\t\n\001D\030\003 \002(\002\"I\n\010Constans\022\023\n\013gy"
    "ro_offset\030\001 \001(\002\022\025\n\rbutton_status\030\002 \001(\r\022\021"
    "\n\003pid\030\003 \001(\0132\004.PID\"\375\001\n\rRobotFeedback\022\020\n\010r"
    "obot_id\030\001 \002(\r\022\027\n\017battery_voltage\030\002 \001(\002\022\023"
    "\n\013cap_voltage\030\003 \001(\002\022\030\n\020dribbe_connected\030"
    "\004 \001(\010\022\025\n\rball_detected\030\005 \001(\010\022\023\n\013motor_fa"
    "ult\030\006 \003(\010\022\025\n\rencoder_fault\030\007 \003(\010\022\020\n\010gyro"
    "_yaw\030\010 \001(\010\022\021\n\tmotor_vel\030\t \003(\002\022\027\n\017motor_s"
    "et_point\030\n \003(\002\022\021\n\003pid\030\013 \001(\0132\004.PID", 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot-feedback.proto", &protobuf_RegisterTypes);
  PID::default_instance_ = new PID();
  Constans::default_instance_ = new Constans();
  RobotFeedback::default_instance_ = new RobotFeedback();
  PID::default_instance_->InitAsDefaultInstance();
  Constans::default_instance_->InitAsDefaultInstance();
  RobotFeedback::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_robot_2dfeedback_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_robot_2dfeedback_2eproto {
  StaticDescriptorInitializer_robot_2dfeedback_2eproto() {
    protobuf_AddDesc_robot_2dfeedback_2eproto();
  }
} static_descriptor_initializer_robot_2dfeedback_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PID::kPFieldNumber;
const int PID::kIFieldNumber;
const int PID::kDFieldNumber;
#endif  // !_MSC_VER

PID::PID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PID)
}

void PID::InitAsDefaultInstance() {
}

PID::PID(const PID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PID)
}

void PID::SharedCtor() {
  _cached_size_ = 0;
  p_ = 0;
  i_ = 0;
  d_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PID::~PID() {
  // @@protoc_insertion_point(destructor:PID)
  SharedDtor();
}

void PID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PID_descriptor_;
}

const PID& PID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2dfeedback_2eproto();
  return *default_instance_;
}

PID* PID::default_instance_ = NULL;

PID* PID::New() const {
  return new PID;
}

void PID::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PID*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(p_, d_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float P = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_)));
          set_has_p();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_I;
        break;
      }

      // required float I = 2;
      case 2: {
        if (tag == 21) {
         parse_I:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_D;
        break;
      }

      // required float D = 3;
      case 3: {
        if (tag == 29) {
         parse_D:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PID)
  return false;
#undef DO_
}

void PID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PID)
  // required float P = 1;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->p(), output);
  }

  // required float I = 2;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->i(), output);
  }

  // required float D = 3;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->d(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PID)
}

::google::protobuf::uint8* PID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PID)
  // required float P = 1;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->p(), target);
  }

  // required float I = 2;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->i(), target);
  }

  // required float D = 3;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->d(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PID)
  return target;
}

int PID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float P = 1;
    if (has_p()) {
      total_size += 1 + 4;
    }

    // required float I = 2;
    if (has_i()) {
      total_size += 1 + 4;
    }

    // required float D = 3;
    if (has_d()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PID::MergeFrom(const PID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PID::CopyFrom(const PID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PID::Swap(PID* other) {
  if (other != this) {
    std::swap(p_, other->p_);
    std::swap(i_, other->i_);
    std::swap(d_, other->d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PID_descriptor_;
  metadata.reflection = PID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Constans::kGyroOffsetFieldNumber;
const int Constans::kButtonStatusFieldNumber;
const int Constans::kPidFieldNumber;
#endif  // !_MSC_VER

Constans::Constans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Constans)
}

void Constans::InitAsDefaultInstance() {
  pid_ = const_cast< ::PID*>(&::PID::default_instance());
}

Constans::Constans(const Constans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Constans)
}

void Constans::SharedCtor() {
  _cached_size_ = 0;
  gyro_offset_ = 0;
  button_status_ = 0u;
  pid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Constans::~Constans() {
  // @@protoc_insertion_point(destructor:Constans)
  SharedDtor();
}

void Constans::SharedDtor() {
  if (this != default_instance_) {
    delete pid_;
  }
}

void Constans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Constans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Constans_descriptor_;
}

const Constans& Constans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2dfeedback_2eproto();
  return *default_instance_;
}

Constans* Constans::default_instance_ = NULL;

Constans* Constans::New() const {
  return new Constans;
}

void Constans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Constans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gyro_offset_, button_status_);
    if (has_pid()) {
      if (pid_ != NULL) pid_->::PID::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Constans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Constans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float gyro_offset = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_offset_)));
          set_has_gyro_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_button_status;
        break;
      }

      // optional uint32 button_status = 2;
      case 2: {
        if (tag == 16) {
         parse_button_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &button_status_)));
          set_has_button_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pid;
        break;
      }

      // optional .PID pid = 3;
      case 3: {
        if (tag == 26) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Constans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Constans)
  return false;
#undef DO_
}

void Constans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Constans)
  // optional float gyro_offset = 1;
  if (has_gyro_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gyro_offset(), output);
  }

  // optional uint32 button_status = 2;
  if (has_button_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->button_status(), output);
  }

  // optional .PID pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Constans)
}

::google::protobuf::uint8* Constans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Constans)
  // optional float gyro_offset = 1;
  if (has_gyro_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gyro_offset(), target);
  }

  // optional uint32 button_status = 2;
  if (has_button_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->button_status(), target);
  }

  // optional .PID pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Constans)
  return target;
}

int Constans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float gyro_offset = 1;
    if (has_gyro_offset()) {
      total_size += 1 + 4;
    }

    // optional uint32 button_status = 2;
    if (has_button_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->button_status());
    }

    // optional .PID pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Constans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Constans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Constans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Constans::MergeFrom(const Constans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gyro_offset()) {
      set_gyro_offset(from.gyro_offset());
    }
    if (from.has_button_status()) {
      set_button_status(from.button_status());
    }
    if (from.has_pid()) {
      mutable_pid()->::PID::MergeFrom(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Constans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Constans::CopyFrom(const Constans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constans::IsInitialized() const {

  if (has_pid()) {
    if (!this->pid().IsInitialized()) return false;
  }
  return true;
}

void Constans::Swap(Constans* other) {
  if (other != this) {
    std::swap(gyro_offset_, other->gyro_offset_);
    std::swap(button_status_, other->button_status_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Constans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Constans_descriptor_;
  metadata.reflection = Constans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotFeedback::kRobotIdFieldNumber;
const int RobotFeedback::kBatteryVoltageFieldNumber;
const int RobotFeedback::kCapVoltageFieldNumber;
const int RobotFeedback::kDribbeConnectedFieldNumber;
const int RobotFeedback::kBallDetectedFieldNumber;
const int RobotFeedback::kMotorFaultFieldNumber;
const int RobotFeedback::kEncoderFaultFieldNumber;
const int RobotFeedback::kGyroYawFieldNumber;
const int RobotFeedback::kMotorVelFieldNumber;
const int RobotFeedback::kMotorSetPointFieldNumber;
const int RobotFeedback::kPidFieldNumber;
#endif  // !_MSC_VER

RobotFeedback::RobotFeedback()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotFeedback)
}

void RobotFeedback::InitAsDefaultInstance() {
  pid_ = const_cast< ::PID*>(&::PID::default_instance());
}

RobotFeedback::RobotFeedback(const RobotFeedback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RobotFeedback)
}

void RobotFeedback::SharedCtor() {
  _cached_size_ = 0;
  robot_id_ = 0u;
  battery_voltage_ = 0;
  cap_voltage_ = 0;
  dribbe_connected_ = false;
  ball_detected_ = false;
  gyro_yaw_ = false;
  pid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotFeedback::~RobotFeedback() {
  // @@protoc_insertion_point(destructor:RobotFeedback)
  SharedDtor();
}

void RobotFeedback::SharedDtor() {
  if (this != default_instance_) {
    delete pid_;
  }
}

void RobotFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotFeedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotFeedback_descriptor_;
}

const RobotFeedback& RobotFeedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2dfeedback_2eproto();
  return *default_instance_;
}

RobotFeedback* RobotFeedback::default_instance_ = NULL;

RobotFeedback* RobotFeedback::New() const {
  return new RobotFeedback;
}

void RobotFeedback::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RobotFeedback*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(robot_id_, gyro_yaw_);
  }
  if (has_pid()) {
    if (pid_ != NULL) pid_->::PID::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  motor_fault_.Clear();
  encoder_fault_.Clear();
  motor_vel_.Clear();
  motor_set_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 robot_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
          set_has_robot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_battery_voltage;
        break;
      }

      // optional float battery_voltage = 2;
      case 2: {
        if (tag == 21) {
         parse_battery_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &battery_voltage_)));
          set_has_battery_voltage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_cap_voltage;
        break;
      }

      // optional float cap_voltage = 3;
      case 3: {
        if (tag == 29) {
         parse_cap_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cap_voltage_)));
          set_has_cap_voltage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dribbe_connected;
        break;
      }

      // optional bool dribbe_connected = 4;
      case 4: {
        if (tag == 32) {
         parse_dribbe_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dribbe_connected_)));
          set_has_dribbe_connected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ball_detected;
        break;
      }

      // optional bool ball_detected = 5;
      case 5: {
        if (tag == 40) {
         parse_ball_detected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ball_detected_)));
          set_has_ball_detected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_motor_fault;
        break;
      }

      // repeated bool motor_fault = 6;
      case 6: {
        if (tag == 48) {
         parse_motor_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 48, input, this->mutable_motor_fault())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_motor_fault())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_motor_fault;
        if (input->ExpectTag(56)) goto parse_encoder_fault;
        break;
      }

      // repeated bool encoder_fault = 7;
      case 7: {
        if (tag == 56) {
         parse_encoder_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 56, input, this->mutable_encoder_fault())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_encoder_fault())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_encoder_fault;
        if (input->ExpectTag(64)) goto parse_gyro_yaw;
        break;
      }

      // optional bool gyro_yaw = 8;
      case 8: {
        if (tag == 64) {
         parse_gyro_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gyro_yaw_)));
          set_has_gyro_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_motor_vel;
        break;
      }

      // repeated float motor_vel = 9;
      case 9: {
        if (tag == 77) {
         parse_motor_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_motor_vel())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_motor_vel())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_motor_vel;
        if (input->ExpectTag(85)) goto parse_motor_set_point;
        break;
      }

      // repeated float motor_set_point = 10;
      case 10: {
        if (tag == 85) {
         parse_motor_set_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 85, input, this->mutable_motor_set_point())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_motor_set_point())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_motor_set_point;
        if (input->ExpectTag(90)) goto parse_pid;
        break;
      }

      // optional .PID pid = 11;
      case 11: {
        if (tag == 90) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotFeedback)
  return false;
#undef DO_
}

void RobotFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotFeedback)
  // required uint32 robot_id = 1;
  if (has_robot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->robot_id(), output);
  }

  // optional float battery_voltage = 2;
  if (has_battery_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->battery_voltage(), output);
  }

  // optional float cap_voltage = 3;
  if (has_cap_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cap_voltage(), output);
  }

  // optional bool dribbe_connected = 4;
  if (has_dribbe_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dribbe_connected(), output);
  }

  // optional bool ball_detected = 5;
  if (has_ball_detected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ball_detected(), output);
  }

  // repeated bool motor_fault = 6;
  for (int i = 0; i < this->motor_fault_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      6, this->motor_fault(i), output);
  }

  // repeated bool encoder_fault = 7;
  for (int i = 0; i < this->encoder_fault_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      7, this->encoder_fault(i), output);
  }

  // optional bool gyro_yaw = 8;
  if (has_gyro_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->gyro_yaw(), output);
  }

  // repeated float motor_vel = 9;
  for (int i = 0; i < this->motor_vel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->motor_vel(i), output);
  }

  // repeated float motor_set_point = 10;
  for (int i = 0; i < this->motor_set_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      10, this->motor_set_point(i), output);
  }

  // optional .PID pid = 11;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RobotFeedback)
}

::google::protobuf::uint8* RobotFeedback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotFeedback)
  // required uint32 robot_id = 1;
  if (has_robot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->robot_id(), target);
  }

  // optional float battery_voltage = 2;
  if (has_battery_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->battery_voltage(), target);
  }

  // optional float cap_voltage = 3;
  if (has_cap_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cap_voltage(), target);
  }

  // optional bool dribbe_connected = 4;
  if (has_dribbe_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->dribbe_connected(), target);
  }

  // optional bool ball_detected = 5;
  if (has_ball_detected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ball_detected(), target);
  }

  // repeated bool motor_fault = 6;
  for (int i = 0; i < this->motor_fault_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(6, this->motor_fault(i), target);
  }

  // repeated bool encoder_fault = 7;
  for (int i = 0; i < this->encoder_fault_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(7, this->encoder_fault(i), target);
  }

  // optional bool gyro_yaw = 8;
  if (has_gyro_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->gyro_yaw(), target);
  }

  // repeated float motor_vel = 9;
  for (int i = 0; i < this->motor_vel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->motor_vel(i), target);
  }

  // repeated float motor_set_point = 10;
  for (int i = 0; i < this->motor_set_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(10, this->motor_set_point(i), target);
  }

  // optional .PID pid = 11;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotFeedback)
  return target;
}

int RobotFeedback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 robot_id = 1;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robot_id());
    }

    // optional float battery_voltage = 2;
    if (has_battery_voltage()) {
      total_size += 1 + 4;
    }

    // optional float cap_voltage = 3;
    if (has_cap_voltage()) {
      total_size += 1 + 4;
    }

    // optional bool dribbe_connected = 4;
    if (has_dribbe_connected()) {
      total_size += 1 + 1;
    }

    // optional bool ball_detected = 5;
    if (has_ball_detected()) {
      total_size += 1 + 1;
    }

    // optional bool gyro_yaw = 8;
    if (has_gyro_yaw()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .PID pid = 11;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pid());
    }

  }
  // repeated bool motor_fault = 6;
  {
    int data_size = 0;
    data_size = 1 * this->motor_fault_size();
    total_size += 1 * this->motor_fault_size() + data_size;
  }

  // repeated bool encoder_fault = 7;
  {
    int data_size = 0;
    data_size = 1 * this->encoder_fault_size();
    total_size += 1 * this->encoder_fault_size() + data_size;
  }

  // repeated float motor_vel = 9;
  {
    int data_size = 0;
    data_size = 4 * this->motor_vel_size();
    total_size += 1 * this->motor_vel_size() + data_size;
  }

  // repeated float motor_set_point = 10;
  {
    int data_size = 0;
    data_size = 4 * this->motor_set_point_size();
    total_size += 1 * this->motor_set_point_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotFeedback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotFeedback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotFeedback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotFeedback::MergeFrom(const RobotFeedback& from) {
  GOOGLE_CHECK_NE(&from, this);
  motor_fault_.MergeFrom(from.motor_fault_);
  encoder_fault_.MergeFrom(from.encoder_fault_);
  motor_vel_.MergeFrom(from.motor_vel_);
  motor_set_point_.MergeFrom(from.motor_set_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_id()) {
      set_robot_id(from.robot_id());
    }
    if (from.has_battery_voltage()) {
      set_battery_voltage(from.battery_voltage());
    }
    if (from.has_cap_voltage()) {
      set_cap_voltage(from.cap_voltage());
    }
    if (from.has_dribbe_connected()) {
      set_dribbe_connected(from.dribbe_connected());
    }
    if (from.has_ball_detected()) {
      set_ball_detected(from.ball_detected());
    }
    if (from.has_gyro_yaw()) {
      set_gyro_yaw(from.gyro_yaw());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_pid()) {
      mutable_pid()->::PID::MergeFrom(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotFeedback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotFeedback::CopyFrom(const RobotFeedback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotFeedback::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pid()) {
    if (!this->pid().IsInitialized()) return false;
  }
  return true;
}

void RobotFeedback::Swap(RobotFeedback* other) {
  if (other != this) {
    std::swap(robot_id_, other->robot_id_);
    std::swap(battery_voltage_, other->battery_voltage_);
    std::swap(cap_voltage_, other->cap_voltage_);
    std::swap(dribbe_connected_, other->dribbe_connected_);
    std::swap(ball_detected_, other->ball_detected_);
    motor_fault_.Swap(&other->motor_fault_);
    encoder_fault_.Swap(&other->encoder_fault_);
    std::swap(gyro_yaw_, other->gyro_yaw_);
    motor_vel_.Swap(&other->motor_vel_);
    motor_set_point_.Swap(&other->motor_set_point_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotFeedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotFeedback_descriptor_;
  metadata.reflection = RobotFeedback_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
